import pandas as pd 
from tensorflow.python.keras.models import Seq
from tensorflow.python.keras import Sequential 
from tensorflow.python.keras.layers import Dense 
from scikeras.wrappers import KerasClassifier 
from sklearn.model_selection import cross_val_score 
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from ucimlrepo import fetch_ucirepo 
  
# fetch dataset 
connectionist_bench_sonar_mines_vs_rocks = fetch_ucirepo(id=151) 
  
# data (as pandas dataframes) 
X = connectionist_bench_sonar_mines_vs_rocks.data.features 
y = connectionist_bench_sonar_mines_vs_rocks.data.targets 
  
# metadata 
print(connectionist_bench_sonar_mines_vs_rocks.metadata) 
  
# variable information 
print(connectionist_bench_sonar_mines_vs_rocks.variables) 

#load dataset
dataframe = pd.read_csv("sonar.csv", header = None)
dataset = dataframe.values
#split into input(X) and output (Y) variables
x = dataset[:,0:60].astype(float)
y = dataset[:,60]

#encode class values as integers 
encoder = LabelEncoder()
encoder.fit(y)
encoded_y = encoder.transform(y)

#baseline model 
def create_baseline():
    #create model 
    model = Sequential()
    model.add(Dense(60, input_shape=(60,), activation = 'relu'))
    model.add(Dense(1,activation = 'sigmoid'))
    #compile model
    model.compile(loss = 'binary_crossentropy', optimize = 'adam', metrics=['accuracy'])
    return model 

# evaluate model with standardized dataset
estimator = KerasClassifier(model=create_baseline, epochs=100, batch_size=5, verbose=0)
kfold = StratifiedKFold(n_splits=10, shuffle=True)
results = cross_val_score(estimator, x, encoded_y, cv=kfold)
print("Baseline: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))